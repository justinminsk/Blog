<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Justin Minsk&#39;s Blog</title>
    <link>/</link>
    <description>Recent content on Justin Minsk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MAchine Learning Part 1</title>
      <link>/post/notebook/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/notebook/</guid>
      <description>notebook/*!** Twitter Bootstrap**//*!* Bootstrap v3.3.7 (http://getbootstrap.com)* Copyright 2011-2016 Twitter, Inc.* Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)*//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html {font-family: sans-serif;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;}body {margin: 0;}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary {display: block;}audio,canvas,progress,video {display: inline-block;vertical-align: baseline;}audio:not([controls]) {display: none;height: 0;}[hidden],template {display: none;}a {background-color: transparent;}a:active,a:hover {outline: 0;}abbr[title] {border-bottom: 1px dotted;}b,strong {font-weight: bold;}dfn {font-style: italic;}h1 {font-size: 2em;margin: 0.</description>
    </item>
    
    <item>
      <title>Machine Learning Part 1</title>
      <link>/post/machinelearningpart1/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/machinelearningpart1/</guid>
      <description>notebook/*!** Twitter Bootstrap**//*!* Bootstrap v3.3.7 (http://getbootstrap.com)* Copyright 2011-2016 Twitter, Inc.* Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)*//*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */html {font-family: sans-serif;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;}body {margin: 0;}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary {display: block;}audio,canvas,progress,video {display: inline-block;vertical-align: baseline;}audio:not([controls]) {display: none;height: 0;}[hidden],template {display: none;}a {background-color: transparent;}a:active,a:hover {outline: 0;}abbr[title] {border-bottom: 1px dotted;}b,strong {font-weight: bold;}dfn {font-style: italic;}h1 {font-size: 2em;margin: 0.</description>
    </item>
    
    <item>
      <title>Python Markdown in a Python Shell</title>
      <link>/post/pythonmarkdown/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/pythonmarkdown/</guid>
      <description>Markdown in a Python ShellMarkdown can be writen in a python shell and the code can be turned into a python block with a 4 space indention.This is all done with the markdown package. For example:
python_string = &amp;#39;Hello World&amp;#39;print(python_string)The problem with doing it in the shell is that while converting to html is easy with the cmd line:
python -m markdown -x codehilite some_markdown.</description>
    </item>
    
    <item>
      <title>Python in RMarkdown</title>
      <link>/post/pythoninrmarkdown/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/pythoninrmarkdown/</guid>
      <description>Python in RStudioPython blocks of code can be written in Rmarkdown and knited with knitr. For example:
python_string = &amp;quot;Hello World&amp;quot;print(python_string)## Hello WorldHowever, unlike R code blocks the data does not transfer from code block to code block. This means you must import packages and data every code block. This is fine for some short examples or for a graph, but this will get tiresome and wordy very quickly if you want to explain more than one step in-depth.</description>
    </item>
    
    <item>
      <title>Tidytext</title>
      <link>/post/tidytext/</link>
      <pubDate>Wed, 08 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/tidytext/</guid>
      <description>TidytextTidytext is a great set of packages that combined with a few other packages and some text can allow you to create some great text analysis.
library(tidytext)library(tm)library(wordcloud)library(stringr)library(dplyr)library(knitr)library(gutenbergr)GutenbergrThis package contains a lot of books we can use to start out text analysis.
gutenberg_works(author == str_extract(author, &amp;quot;Poe, Edgar Allan&amp;quot;))## # A tibble: 16 x 8## gutenberg_id## &amp;lt;int&amp;gt;## 1 932## 2 1062## 3 1063## 4 1064## 5 1065## 6 2147## 7 2148## 8 2149## 9 2150## 10 2151## 11 8893## 12 10031## 13 25525## 14 32037## 15 45484## 16 50852## # .</description>
    </item>
    
    <item>
      <title>Pokemon</title>
      <link>/post/pokemon/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/pokemon/</guid>
      <description>How to run the codeTo run the code you should use anaconda3 or jupyter notebook with python 3. You will also need numpy, pandas, matplotlib, seaborn, and pylab libraries for python.
A Look at Pokemon by GenerationPokemon became a sensation in the 1990&#39;s and continues to be a popular franchise to this date.Pokemon the video game has evolved (pun intended) over the decades into a complex game that takesa lot of statistics and analyze to create teams that can win the meta at tournaments.</description>
    </item>
    
    <item>
      <title>Korean Conflict Data</title>
      <link>/post/koreanconflict/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/koreanconflict/</guid>
      <description>Looking at data from kaggle that shows data on the Korean Conflict.
First we need to import the libraries:
library(dplyr)library(ggplot2)library(stringr)library(lubridate)Then import the data:
kc &amp;lt;- read.csv(&amp;#39;KoreanConflict.csv&amp;#39;, header = TRUE, stringsAsFactors = FALSE)#import the datacolnames(kc)## [1] &amp;quot;SERVICE_TYPE&amp;quot; &amp;quot;SERVICE_CODE&amp;quot; &amp;quot;ENROLLMENT&amp;quot; ## [4] &amp;quot;BRANCH&amp;quot; &amp;quot;RANK&amp;quot; &amp;quot;PAY_GRADE&amp;quot; ## [7] &amp;quot;POSITION&amp;quot; &amp;quot;BIRTH_YEAR&amp;quot; &amp;quot;SEX&amp;quot; ## [10] &amp;quot;HOME_CITY&amp;quot; &amp;quot;HOME_COUNTY&amp;quot; &amp;quot;NATIONALITY&amp;quot; ## [13] &amp;quot;STATE_CODE&amp;quot; &amp;quot;HOME_STATE&amp;quot; &amp;quot;MARITAL_STATUS&amp;quot; ## [16] &amp;quot;ETHNICITY&amp;quot; &amp;quot;ETHNICITY_1&amp;quot; &amp;quot;ETHNICITY_2&amp;quot; ## [19] &amp;quot;DIVISION&amp;quot; &amp;quot;INCIDENT_DATE&amp;quot; &amp;quot;FATALITY_YEAR&amp;quot; ## [22] &amp;quot;FATALITY_DATE&amp;quot; &amp;quot;HOSTILITY_CONDITIONS&amp;quot; &amp;quot;FATALITY&amp;quot; ## [25] &amp;quot;BURIAL_STATUS&amp;quot;#show the column namesLook at the incident dates to see how to find a problem with the data and fix it:</description>
    </item>
    
    <item>
      <title>Mass Shooting Data: Part 1</title>
      <link>/post/massshootingpart1/</link>
      <pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/massshootingpart1/</guid>
      <description>Looking at data on mass shootings in the USA.
First we import libraries:
library(dplyr)library(ggplot2)library(stringr)library(lubridate)#import librariesThen the data:
MSD &amp;lt;- read.csv(&amp;quot;Mass Shootings Dataset.csv&amp;quot;)#import datacolnames(MSD)## [1] &amp;quot;S.&amp;quot; &amp;quot;Title&amp;quot; &amp;quot;Location&amp;quot; ## [4] &amp;quot;Date&amp;quot; &amp;quot;Summary&amp;quot; &amp;quot;Fatalities&amp;quot; ## [7] &amp;quot;Injured&amp;quot; &amp;quot;Total.victims&amp;quot; &amp;quot;Mental.Health.Issues&amp;quot;## [10] &amp;quot;Race&amp;quot; &amp;quot;Gender&amp;quot; &amp;quot;Latitude&amp;quot; ## [13] &amp;quot;Longitude&amp;quot;#look at column namesThen we filter the data:
df&amp;lt;-MSD%&amp;gt;%mutate(date = mdy(Date))%&amp;gt;%filter(date &amp;gt;= &amp;quot;2010-01-01&amp;quot;)#create a date using lubridateAnd create a chart:</description>
    </item>
    
    <item>
      <title>Flexdashboard</title>
      <link>/post/flaexdashboard/</link>
      <pubDate>Fri, 29 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/flaexdashboard/</guid>
      <description>Flexdashboard is a simple Rmarkdown library that allows you to post multiple graphs with a side board. Here is an example https://justinminsk.github.io/Dashboard/.</description>
    </item>
    
    <item>
      <title>1980 Team Homeruns</title>
      <link>/post/1980teamhr/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/1980teamhr/</guid>
      <description>Import libraries:
library(Lahman)library(dplyr)library(ggplot2)library(ggiraph)Set up the data:
df&amp;lt;-Teams%&amp;gt;%filter(yearID == 1980)%&amp;gt;%select(name, HR)%&amp;gt;%arrange(HR)#sort the teams from lahman by the year 1980 and show the name and HR totaldf$name&amp;lt;-factor(df$name, levels = df$name)#change the type of data to a factor and not a chr, then level it by our dplyr querry Create an interactive graph with ggiraph:
g&amp;lt;-ggplot() +geom_bar_interactive(data = df, aes(x = name, y = HR, tooltip = HR, data_id = name), stat = &amp;quot;identity&amp;quot;, color = &amp;quot;blue&amp;quot;, fill = &amp;quot;white&amp;quot;) +coord_flip()+ggtitle(&amp;quot;1980 Team Homeruns&amp;quot;)+ylab(&amp;quot;Homeruns&amp;quot;)+xlab(&amp;quot;Team Name&amp;quot;)#graph the data using a bar graphggiraph(code = print(g), hover_css = &amp;quot;fill:red;stroke:black&amp;quot;){&#34;</description>
    </item>
    
    <item>
      <title>Babe Ruth Homeruns by Year</title>
      <link>/post/baberuthhrbyyear/</link>
      <pubDate>Wed, 27 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/baberuthhrbyyear/</guid>
      <description>Import Libraries:
library(Lahman)library(dplyr)library(ggplot2)library(ggiraph)Sort the data:
df&amp;lt;-Batting%&amp;gt;%filter(playerID == &amp;quot;ruthba01&amp;quot;)%&amp;gt;%select(yearID, HR)#get Babe Ruths Homeruns by yearGraph the data:
g&amp;lt;-ggplot()+geom_line(data = df, aes(x = yearID, y = HR)) +geom_point_interactive(data = df, aes(x = yearID, y = HR, tooltip = HR, data_id = yearID))#graph the dataggiraph(code = print(g), hover_css = &amp;quot;fill:white;stroke:red&amp;quot;){&#34;x&#34;:{&#34;html&#34;:&#34;\n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 0\n \n \n 20\n \n \n 40\n \n \n 60\n \n \n \n \n \n \n \n \n \n \n \n 1915\n \n \n 1920\n \n \n 1925\n \n \n 1930\n \n \n 1935\n \n \n yearID\n \n \n HR\n \n \n\ndiv.</description>
    </item>
    
    <item>
      <title>Changing data types using dplyr</title>
      <link>/post/data_type_dplyr/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/data_type_dplyr/</guid>
      <description>Showing how to sort data using dyplr to make ggplots show a graph that it would not without changing the data type.
Load libraries:
library(Lahman)library(dplyr)library(ggplot2)Change the data with dyplr:
df&amp;lt;-Teams%&amp;gt;%filter(yearID == 1980)%&amp;gt;%select(name, HR)%&amp;gt;%arrange(HR)#sort the teams from lahman by the year 1980 and show the name and HR totalclass(df$name)## [1] &amp;quot;character&amp;quot;#look at the data type of name in the data framedf$name&amp;lt;-factor(df$name, levels = df$name)#change the type of data to a factor and not a chr, then level it by our dplyr querryclass(df$name)## [1] &amp;quot;factor&amp;quot;#looking at the data type againGraph the data:</description>
    </item>
    
    <item>
      <title>Histogram</title>
      <link>/post/histogram/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/histogram/</guid>
      <description>Creating histograms using ggplots.
load libraries:
library(Lahman)library(dplyr)library(ggplot2)Sort the data using dplyr:
df&amp;lt;-Master%&amp;gt;%filter(!is.na(weight))%&amp;gt;%select(weight)#get the weights form master of lahmanGraph the data:
ggplot() +geom_histogram(data = df, aes(x = weight), color = &amp;quot;white&amp;quot;, fill = &amp;quot;blue&amp;quot;, bins = 25) +ggtitle(&amp;quot;Baseball Player Weights&amp;quot;)#graph the weights in a histogram</description>
    </item>
    
    <item>
      <title>Graphing Lahman Data</title>
      <link>/post/lahmangraph/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/lahmangraph/</guid>
      <description>PrefaceThis post is to show how to get data to a point to graph and then graph it using ggplots.
First install libraries:
library(Lahman)library(dplyr)library(ggplot2)library(ggiraph)Then join the tables:
df&amp;lt;-Batting%&amp;gt;%group_by(playerID)%&amp;gt;%summarise(career_HR=sum(HR), career_SO=sum(SO))%&amp;gt;%filter(career_HR&amp;gt;=400)#get the playerID&amp;#39;s of all players who have a HR total of over 399HRvSO&amp;lt;-inner_join(df, Master, by=c(&amp;quot;playerID&amp;quot;))%&amp;gt;%select(nameFirst, nameLast, career_HR, career_SO)#join with the master table to get first and last names of the players using plaerIDHRvSO$name&amp;lt;-paste(HRvSO$nameFirst, HRvSO$nameLast)#create a name column that combines first and last nameThen graph:</description>
    </item>
    
    <item>
      <title>dplyr</title>
      <link>/post/dplyr/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/dplyr/</guid>
      <description>Justin Minsk
PrefaceThe purpose of this website is to learn basic website building using Rmarkdown and to create notes for dpylr as a Mercyhurst grad student.
Filter Columns and RowsWhen using dplyr, you can filter using select and filter commands. Below is an example of how this works. First you need to install and load Lahman and dplyr packages.
library(Lahman)library(dplyr)Now we will run an example of filtering by taking from Batting the playerID, yearID, HR and then filter so the table only contains NY Yankees from the year 1927.</description>
    </item>
    
    <item>
      <title>ggplots</title>
      <link>/post/ggplots/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/ggplots/</guid>
      <description>Data VisulzationThe package I am using for ggplots2 and dyplr.
library(tidyverse)First set of data.
mpg## # A tibble: 234 x 11## manufacturer model displ year cyl trans drv cty hwy## &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;## 1 audi a4 1.8 1999 4 auto(l5) f 18 29## 2 audi a4 1.8 1999 4 manual(m5) f 21 29## 3 audi a4 2.</description>
    </item>
    
  </channel>
</rss>